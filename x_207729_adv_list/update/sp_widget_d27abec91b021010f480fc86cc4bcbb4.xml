<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function advancedListController($location, $httpParamSerializer, sortService) {
	/* widget controller */
	var c = this;

	c.sort = function () {
		if (c.loading) {
			return;
		}
		addURLParms({sortBy:c.currentSort.id}, false);
		initializeList({
			sorting: c.currentSort,
			searchTerm: c.searchTerm
		});
	};



	// TODO: Move search and sorting to it's own widget?
	c.search = function (clearInput) {
		if (clearInput) {
			c.searchInput = undefined;
		}
		if (c.searchInput !== c.searchTerm) {
			c.searchTerm = c.searchInput;
			addURLParms({search:c.searchTerm}, false);
			initializeList({
				sorting: c.currentSort,
				searchTerm: c.searchTerm
			});
		}
	};


	c.loadMore = function () {
		if (c.loading) {
			return;
		}
		c.currentPage += 1;
		loadMore({
			sorting: c.currentSort,
			currentPage: c.currentPage,
			searchTerm: c.searchTerm
		});
	};


	c.generateLink = function (urlObj) {
		var url = "",
			serializedParams = $httpParamSerializer(urlObj.parms);

		if (urlObj.type === 'url') {
			url = urlObj.base_url;
		}

		if (serializedParams.length > 0) {
			url += ((url.indexOf('?') === -1) ? '?' : '&') + serializedParams;
		}
		return url;
	};



	function addURLParms(parms, refreshPage) {
		var newParms = $location.search();
		Object.keys(parms).forEach(function(key)  {
			newParms[key] = parms[key];
		});
		newParms.spa = (refreshPage) ? null : 1;
		$location.search(newParms);
	}

	
	function initializeList(inputs) {
		var i = inputs;
		i.initializedSources = c.initializedSources;
		i.currentPage = 0;
		i.action = 'load';
		c.loading = true;
		c.server.get(inputs).then(function (response) {
			var r = response.data,
				compiledResults = compileResults(r.results, i.sorting);
			formList(compiledResults, r.pageSize, false);
			c.displayControls = true;
		});
	}



	function loadMore(inputs) {
		var i = inputs;
		i.initializedSources = c.initializedSources;
		i.action = 'load';
		c.loading = true;
		c.server.get(i).then(function (response) {
			var r = response.data;
			// when we move to another page and we have cached items, push them to results array
			if (c.cache.length > 0) {
				r.results.push(c.cache);
				c.cache = [];
			}
			var compiledResults = compileResults(r.results, i.sorting);
			formList(compiledResults, r.pageSize, true);
		});
	}



	function formList(results, pageSize, addItems) {
		if (results.length < pageSize) {
			c.noMoreResults = true;
		}
		if (results.length > pageSize) {
			c.cache = results.slice(pageSize);
		}
		c.items = (addItems) ? c.items.concat(results.slice(0, pageSize)) : results.slice(0, pageSize);
		c.noResults = c.items.length === 0;
		c.loading = false;
	}



	function compileResults(dataArr, sorting) {
		var sortArr = [].concat.apply([], dataArr), // our records come in a nested array so we need to combine those to one single array
			s = sorting;
		switch (s.type) {
			case 'date':
				c.sortService.dateSort(sortArr, s.field, s.orderAsc);
				break;
			case 'locale':
				c.sortService.localeSort(sortArr, s.field, s.orderAsc);
				break;
			default:
				c.sortService.defaultSort(sortArr, s.field, s.orderAsc);
		}
		return sortArr;
	}


	function init() {
		c.initializedSources = c.data.initializedSources;
		c.sortService = sortService;
		c.currentPage = 0;
		//check if URL already has sorting or search defined
		var parms = $location.search();
		c.currentSort = (parms && parms.sortBy) ? c.data.sortOptions[parms.sortBy-1] : c.data.sortOptions[0];
		c.searchTerm = (parms && parms.search) ? parms.search : "";
		c.searchInput = c.searchTerm; // display actual searchTerm in the input field

		c.displayControls = false; // hide controls before the list has loaded
		initializeList({
			sorting: c.currentSort,
			searchTerm: c.searchTerm
		});
	}

	init();

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.list-group-horizontal .list-group-item {
	display: inline-block;
}

.list-group-horizontal .list-group-item {
	margin-bottom: 0;
	margin-left: -4px;
	margin-right: 0;
	border-right-width: 0;
}

.list-group-horizontal .list-group-item:first-child {
	border-top-right-radius: 0;
	border-bottom-left-radius: 4px;
}

.list-group-horizontal .list-group-item:last-child {
	border-top-right-radius: 4px;
	border-bottom-left-radius: 0;
	border-right-width: 1px;
}

#controls {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;

	.search {
		flex: 1 0 auto;

		.input-group {
			width: 100%;
		}
	}

	.sort {
		flex: 1 0 auto;
		display: flex;
		justify-content: flex-end;
		align-items: baseline;
	}
}

#items {
	display: block;
}

#item-list,
#errors,
#controls {
	margin-bottom: 10px;

	ul {
		list-style: none;
	}

	#items {
		padding: 0;
	}
}

.item-body {
	display: flex;
	justify-content: space-between;

	.item-type,
	.item-content {
		display: flex;
	}

	.item-type {
		flex: 1 0 8%;
		flex-direction: column;
		align-items: center;
	}

	.item-content {
		flex: 2 0 92%;
		flex-wrap: wrap;

		.item-title {
			flex: 1 0 100%;
			margin: 0;
		}

		.primary-content {
			flex: 3 0 80%;
			padding-right: 1%;
		}

		.secondary-content {
			flex: 1 0 20%;
			padding-left: 1%;
			border-left: 1px solid $primary;
		}
	}
}

@media (max-width: 768px) {
	#controls, #controls .sort {
		display: block;
		text-align: center;
	}

	.item-body,
	.item-body .item-content {
		display: block;
	}

	.item-body .item-content {
		text-align: center;

		.item-title,
		.primary-content,
		.secondary-content {
			padding: 5% 0;
		}

		.secondary-content {
			border-left: none;
			border-top: 1px solid $primary;
		}
	}

}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>sp-advanced-list</id>
        <internal>false</internal>
        <link><![CDATA[function link (scope, element, attrs, controller) {
    var lazyLoader = $injector.get("lazyLoader");
    lazyLoader.putTemplates(scope.data.listTemplates);
}]]></link>
        <name>SP Advanced List</name>
        <option_schema>[{"displayValue":"List Sources","name":"list_sources","display_value_list":[],"section":"Data","label":"List Sources","type":"glide_list","value":"x_207729_adv_list_item_definition","ed":{"reference":"x_207729_adv_list_item_definition"}},{"hint":"Title for this list","name":"title","section":"Presentation","label":"List Title","type":"string"},{"name":"hide_title","section":"Presentation","default_value":"false","label":"Hide List Title","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
  // CONSTANTS
  var LIST_SOURCE_TABLE = "x_207729_adv_list_item_definition",
    CONFIG_FIELDS = [
      "active",
      "table",
      "id",
      "title_field",
      "primary_fields",
      "secondary_fields",
      "link_fields",
      "filter",
      "item_icon",
      "item_template",
      "type",
      "link_url",
      "link_parameters",
      "page"
    ],
    // TODO?: Move search and sorting logic to it's own widget
    SORT_OPTIONS = [{
        id: 1,
        field: "title",
        display: gs.getMessage("title_AZ"),
        orderAsc: true,
        type: "locale"
      },
      {
        id: 2,
        field: "title",
        display: gs.getMessage("title_ZA"),
        orderAsc: false,
        type: "locale"
      },
      {
        id: 3,
        field: "sys_created_on",
        display: gs.getMessage("Newest"),
        orderAsc: false,
        type: "date"
      },
      {
        id: 4,
        field: "sys_created_on",
        display: gs.getMessage("Oldest"),
        orderAsc: true,
        type: "date"
      }
    ];

  var initializedSources = [],
    pageSize = 10; // TODO: allow page size to be set in instanse options
    data.sortOptions = SORT_OPTIONS;

  // in order to keep the options beyond initial load we need to pass them to data object
  if (options) {
    data.options = options;
  }

  // making the widget async
  if (!input) {
    //initialize the table instances on the first load so templates can be cached
    initializedSources = initializeListSources(
      options.list_sources,
      LIST_SOURCE_TABLE,
      CONFIG_FIELDS
    );
    data.initializedSources = initializedSources;
    return;
  }

  // set options from input
  if (input.options) {
    options = input.options;
  }

  var grOptions = {
    orderBy: input.sorting.field,
    orderAsc: input.orderAsc,
    pageStart: input.currentPage * pageSize,
    pageEnd: input.currentPage * pageSize + pageSize,
    searchTerm: input.searchTerm,
    initializedSources: input.initializedSources,
  };

  if (input.action === "load") {
    load(grOptions);
  }

  function load(opt) {
    var sources = opt.initializedSources;
    if (!sources) {
      errorMsgProvider("configuration");
      return;
    }

    var sourceQueries = sources.map(function (source) {
      if (opt.orderBy === "title") {
        opt.orderBy = source.title_field;
      }
      var tempGr = generateGliderecord(source.table, source.filter, opt);
      return {
        source: source,
        glideRecord: tempGr,
        noRecords: tempGr.getRowCount()
      };
    });

    // clean null queries and 0 result queries
    var validQueries = sourceQueries.filter(function (query) {
      return query.glideRecord !== null && query.noRecords > 0;
    });

    //fetch available records from valid sources
    var results = validQueries.map(function (query) {
      return getRecords(query.glideRecord, query.source);
    });

    data.results = results;
    data.initializedSources = opt.initializedSources;
    data.searchTerm = opt.searchTerm;
    data.pageSize = pageSize;
  }
})();

function initializeListSources(
  listSources,
  listSourceTable,
  configurationFields
) {
  if (listSources.length === 0) {
    errorMsgProvider("configuration");
    return;
  }
  var sources = listSources.split(",");
  data.listTemplates = {};
  var sourceConfigs = sources.map(function (source) {
    var sourceGr = new GlideRecord(listSourceTable);
    sourceGr.get(source);
    if (!sourceGr.isValidRecord() || sourceGr.getValue("active") === "0") {
      errorMsgProvider("table");
      return;
    }
    var t = {};
    for (var i = 0, j = configurationFields.length; i < j; i++) {
      t[configurationFields[i]] = sourceGr.getValue(configurationFields[i]);
    }
    data.listTemplates["sp-template-" + t.id + ".html"] = $sp.translateTemplate(
      t.item_template
    ); //using undocumented ServiceNow function to generate the list templates from record data
    return t;
  });
  return sourceConfigs;
}



function generateGliderecord(table, filter, o) {
  var query = new GlideRecordSecure(table);

  if (!query.isValid()) {
    errorMsgProvider("table", table, $sp.getValue("title"));
    return;
  }

  if (filter) {
    query.addEncodedQuery(filter);
  }

  if (o.searchTerm) {
    //query.addQuery("123TEXTQUERY321", o.searchTerm);
    query.addQuery('IR_AND_OR_QUERY', o.searchTerm);
  }
  if (
    o.orderAsc === true ?
    query.orderBy(o.orderBy) :
    query.orderByDesc(o.orderBy)
  );

  if (o) {
    query.chooseWindow(o.pageStart, o.pageEnd);
  }

  query.query();
  return query;
}


function getRecords(query, source) {
  var records = [],
    t = source;

  while (query.next()) {
    if (!query.canRead()) {
      continue;
    }
    var record = {},
      title = {};
    $sp.getRecordDisplayValues(title, query, t.title_field);

    record = {
      sys_id: query.getValue("sys_id"), //get sys_id for every record
      sys_created_on: query.getValue("sys_created_on"), // sorting
      sys_updated_on: query.getValue("sys_updated_on"), // sorting
      sys_class_name: query.getDisplayValue("sys_class_name"), // display below icon
      title: title[Object.keys(title)[0]],
      source_id: t.id,
      icon: t.item_icon, //form FontAwesome icon name for the record
      templateID: "sp-template-" + t.id + ".html", // form the record template name
      primary_fields: {},
      secondary_fields: {},
      link_fields: {},
    };

    //we need to use $sp.getRecord* to access dot-walked fields in scoped application
    $sp.getRecordElements(record.primary_fields, query, t.primary_fields);
    $sp.getRecordElements(record.secondary_fields, query, t.secondary_fields);
    $sp.getRecordElements(record.link_fields, query, t.link_fields);

    record.url = generateURL(record, {
      type: t.type,
      page: t.page,
      base_url: t.link_url,
      parms: t.link_parameters,
    });
    records.push(record);
  }
  return records;
}

function generateURL(record, urlObj) {
  var parms = JSON.parse(urlObj.parms);
  var url = {
    type: urlObj.type,
    base_url: urlObj.base_url || "",
    parms: {},
  };

  // TODO: Move the page query to be done when list sources are initialized to reduce the number of queries
  if (urlObj.type === "page") {
    var pageGr = new GlideRecord("sp_page");
    pageGr.get(urlObj.page);
    url.parms.id = pageGr.getValue("id");
  }

  for (var key in parms) {
    if (parms.hasOwnProperty(key)) {
      var parm = parms[key],
          type = parm.split('.')[0],
          field = parm.split('.')[1],
          value = "";

      if(type === 'record'){
        value = record[field];
      }
      if(type === 'field'){
        value = record.link_fields[field];
      }
      if (value === "") {
        value = parm;
      }
      url.parms[key] = value.toLowerCase();
    }
  }

  return url;
}

/**
 *
 * @param {string} errorType possible errors "configuration" or "table"
 * @param {string} arg1 table name to be added to the error message
 * @param {string} arg2 widget identifier for error message
 */
function errorMsgProvider(errorType, arg1, arg2) {
  data.error = true;
  data.errorMessages = [];
  switch (errorType) {
    case "configuration":
      data.errorMessages.push(
        "Table configuration is not available for this widget. Please contact your system administrator."
      );
      break;
    case "table":
      data.errorMessages.push(
        "One of tables provided for widget is not valid."
      );
      gs.warn(
        "The table ({0}) provided for widget ({1}) is not valid.",
        arg1,
        arg2
      );
      break;
    case "table_access":
      data.errorMessages.push(
        "Cannot display items from one of the defined tables due to access right restrictions. " + arg1 + " " + arg2
      );
      break;
    default:
      data.errorMessages.push(
        "An error occurred, please try again later. If the problem persists contact your system administrator."
      );
  }
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-15 09:23:49</sys_created_on>
        <sys_id>d27abec91b021010f480fc86cc4bcbb4</sys_id>
        <sys_mod_count>883</sys_mod_count>
        <sys_name>SP Advanced List</sys_name>
        <sys_package display_value="SP Advanced List" source="x_207729_adv_list">09a2f2811b021010f480fc86cc4bcbf0</sys_package>
        <sys_policy/>
        <sys_scope display_value="SP Advanced List">09a2f2811b021010f480fc86cc4bcbf0</sys_scope>
        <sys_update_name>sp_widget_d27abec91b021010f480fc86cc4bcbb4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-09-17 09:17:35</sys_updated_on>
        <template><![CDATA[<div id="title" class="col-xs-12" role="" ng-if="::options.hide_title === 'false'">
    <h1>{{::options.title || "Hello there!"}}</h1>
</div>

<section id="errors" ng-if="data.error" class="col-xs-12">
    <ul>
        <li ng-repeat="error in data.errorMessages" class="alert alert-warning">
            {{error}}
        </li>
    </ul>
</section>

<section id="controls" class="col-xs-12 form-inline" ng-if="c.displayControls">

    <div class="form-group search">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search for..." ng-model="c.searchInput"
                ng-disabled="c.loading">
            <div class="input-group-btn">
                <button class="btn btn-default" type="button" ng-click="c.search()"
                    ng-disabled="c.loading">${search}</button>
                <button class="btn btn-danger" type="button" ng-click="c.search(true)"
                    ng-disabled="c.loading">${clear}</button>
            </div>
        </div>
    </div>

    <div class="form-group form-inline sort">
        <label for="sortingMenu">${sort_by_text}</label>
        <select class="form-control" name="sortingMenu" id="sortingMenu"
            ng-options="option as option.display for option in data.sortOptions track by option.id"
            ng-model="c.currentSort" ng-change="c.sort()" ng-disabled="c.loading">
        </select>
    </div>
</section>

<section id="item-list" class="col-xs-12">
    <ul id=items ng-if="!c.noResults">
        <li class="panel panel-default" ng-repeat="item in c.items">
            <a class="panel-body item-body" ng-href="{{c.generateLink(item.url)}}">

                <!-- if icon is available we'll show that and the class name of item -->
                <div ng-if="item.icon !== null && item.icon !== undefined" class="item-type">
                    <div class="fa fa-2x" ng-class="'fa-' + item.icon"></div>
                    <small class="text-muted">{{item.sys_class_name}}</small>
                </div>

                <!-- template provided in list source definition -->
                <div ng-include="item.templateID" class="item-content"></div>

                <!-- using the back-up list template on when no template is provided -->
                <div ng-if="data.listTemplates[item.templateID] == null">
                    <h3>{{item.title}}</h3>
                    <p ng-repeat="field in item.primary_fields">{{field.display_value}}</p>
                </div>

            </a>
        </li>
    </ul>

    <div ng-if="c.noResults" class="text-center">
        <h3>${noResultsText}</h3>
    </div>

</section>

<section ng-if="c.displayControls">
    <div ng-if="!c.noMoreResults" class="col-xs-12">
        <button type="button" class="btn btn-default center-block" ng-disabled="c.loading" aria-label="${loadMoreItems}"
            ng-click="c.loadMore()">${loadMoreItems}</button>
    </div>
</section>]]></template>
    </sp_widget>
</record_update>
